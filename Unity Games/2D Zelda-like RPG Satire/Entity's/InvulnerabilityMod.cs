using System.Collections;
using System.Collections.Generic;
using UnityEngine;

//A component used by entitys to reflect that they have taken damage or used by any object that needs to flash colors
public class InvulnerabilityMod : MonoBehaviour
{
    [SerializeField] Color invulnerabilityColor = new Vector4(0.93602215f, 0.9528302f, 0.5438323f, 1.0f);
    [SerializeField] bool justColorChange = false;
    Color originalColor;
    new SpriteRenderer renderer;
    public bool isInvulerable;
    bool colors;

    void Start()
    {
        renderer = GetComponentInChildren<SpriteRenderer>();
        originalColor = renderer.color;
    }

    public void MakeInvulnerable(ref float duration){ colors = false;  StartCoroutine(Invulnerablility(duration)); }
    public void MakeInvulnerable(ref float duration, bool colors){ this.colors = true; StartCoroutine(Invulnerablility(duration)); }

    //Enables entity invulverable for a time and calls change colors
    IEnumerator Invulnerablility(float loopDuration)
    {
        if(!justColorChange)isInvulerable = true;
        if(colors)StartCoroutine(ChangeColors(loopDuration));
        yield return new  WaitForSeconds(loopDuration);
        isInvulerable = false;
    }

    IEnumerator ChangeColors(float duration)
    {
        if (renderer)
        {
            renderer.color = invulnerabilityColor;
            yield return new WaitForSeconds(duration / 6);
            renderer.color = originalColor;
            yield return new WaitForSeconds(duration / 6);
            renderer.color = invulnerabilityColor;
            yield return new WaitForSeconds(duration / 6);
            renderer.color = originalColor;
            yield return new WaitForSeconds(duration / 6);
            renderer.color = invulnerabilityColor;
            yield return new WaitForSeconds(duration / 6);
            renderer.color = originalColor;
            yield return new WaitForSeconds(duration / 6);
        }
    }
}
